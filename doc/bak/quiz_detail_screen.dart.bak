import 'package:flutter/material.dart';
import 'package:flutter_math_fork/flutter_math.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import '../../lib/models/quiz.dart';
import '../../lib/widgets/geometry_drawer.dart';

class QuizDetailScreen extends StatefulWidget {
  final String quizId;

  const QuizDetailScreen({
    super.key,
    required this.quizId,
  });

  @override
  State<QuizDetailScreen> createState() => _QuizDetailScreenState();
}

class _QuizDetailScreenState extends State<QuizDetailScreen> {
  int currentIndex = 0;
  final PageController _pageController = PageController();
  final Map<int, int> answers = {};
  late Future<Quiz> _quizFuture;

  @override
  void initState() {
    super.initState();
    _quizFuture = _fetchQuiz();
  }

  Future<Quiz> _fetchQuiz() async {
    final response = await http.get(
        Uri.parse('http://localhost:8080/api/questions?pageNo=1&pageSize=10'));

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      return Quiz.fromJson(data);
    } else {
      throw Exception('Failed to load quiz');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: FutureBuilder<Quiz>(
          future: _quizFuture,
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return const Text('加载中...');
            } else if (snapshot.hasError) {
              return Text('错误: ${snapshot.error}');
            } else {
              return Text(snapshot.data!.title);
            }
          },
        ),
        actions: [
          FutureBuilder<Quiz>(
            future: _quizFuture,
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return const SizedBox.shrink();
              } else if (snapshot.hasError) {
                return const SizedBox.shrink();
              } else {
                return Center(
                  child: Padding(
                    padding: const EdgeInsets.only(right: 16.0),
                    child: Text(
                      '${currentIndex + 1}/${snapshot.data!.questions.length}',
                      style: const TextStyle(fontSize: 16),
                    ),
                  ),
                );
              }
            },
          ),
        ],
      ),
      body: FutureBuilder<Quiz>(
        future: _quizFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text('错误: ${snapshot.error}'));
          } else {
            final quiz = snapshot.data!;
            return Column(
              children: [
                LinearProgressIndicator(
                  value: (currentIndex + 1) / quiz.questions.length,
                  backgroundColor: Colors.grey[200],
                  valueColor: AlwaysStoppedAnimation<Color>(
                    Theme.of(context).primaryColor,
                  ),
                ),
                Expanded(
                  child: PageView.builder(
                    controller: _pageController,
                    itemCount: quiz.questions.length,
                    onPageChanged: (index) {
                      setState(() {
                        currentIndex = index;
                      });
                    },
                    itemBuilder: (context, index) {
                      final question = quiz.questions[index];
                      return SingleChildScrollView(
                        padding: const EdgeInsets.all(16.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Container(
                              padding: const EdgeInsets.symmetric(
                                horizontal: 8,
                                vertical: 4,
                              ),
                              decoration: BoxDecoration(
                                color: Theme.of(context)
                                    .primaryColor
                                    .withOpacity(0.1),
                                borderRadius: BorderRadius.circular(4),
                              ),
                              child: Text(
                                question.type,
                                style: TextStyle(
                                  color: Theme.of(context).primaryColor,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                            const SizedBox(height: 16),
                            Text(
                              '第${index + 1}题（${question.score}分）',
                              style: const TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            const SizedBox(height: 8),
                            if (question.type.contains('几何'))
                              Center(
                                child: Padding(
                                  padding: const EdgeInsets.symmetric(
                                      vertical: 16.0),
                                  child: GeometryDrawer(
                                    type: question.type,
                                    content: question.content,
                                  ),
                                ),
                              ),
                            Math.tex(
                              question.content,
                              textStyle: const TextStyle(fontSize: 18),
                            ),
                            const SizedBox(height: 24),
                            const Text(
                              '选项：',
                              style: TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            const SizedBox(height: 8),
                            ...List.generate(
                              question.options.length,
                              (i) => RadioListTile<int>(
                                value: i,
                                groupValue: answers[index],
                                onChanged: (value) {
                                  setState(() {
                                    answers[index] = value!;
                                  });
                                },
                                title: Math.tex(
                                  question.options[i],
                                  textStyle: const TextStyle(fontSize: 16),
                                ),
                              ),
                            ),
                          ],
                        ),
                      );
                    },
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      if (currentIndex > 0)
                        ElevatedButton(
                          onPressed: () {
                            _pageController.previousPage(
                              duration: const Duration(milliseconds: 300),
                              curve: Curves.easeInOut,
                            );
                          },
                          child: const Text('上一题'),
                        )
                      else
                        const SizedBox.shrink(),
                      if (currentIndex < quiz.questions.length - 1)
                        ElevatedButton(
                          onPressed: () {
                            _pageController.nextPage(
                              duration: const Duration(milliseconds: 300),
                              curve: Curves.easeInOut,
                            );
                          },
                          child: const Text('下一题'),
                        )
                      else
                        ElevatedButton(
                          onPressed: () {
                            _submitQuiz(quiz);
                          },
                          child: const Text('提交试卷'),
                        ),
                    ],
                  ),
                ),
              ],
            );
          }
        },
      ),
    );
  }

  void _submitQuiz(Quiz quiz) {
    int score = 0;
    for (var entry in answers.entries) {
      if (entry.value == quiz.questions[entry.key].correctAnswer) {
        score += quiz.questions[entry.key].score;
      }
    }

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('考试结果'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('总分：${quiz.totalScore}分'),
            const SizedBox(height: 8),
            Text('得分：$score分'),
            const SizedBox(height: 8),
            Text('正确率：${(score / quiz.totalScore * 100).toStringAsFixed(1)}%'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              Navigator.of(context).pop();
            },
            child: const Text('确定'),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _pageController.dispose();
    super.dispose();
  }
}
